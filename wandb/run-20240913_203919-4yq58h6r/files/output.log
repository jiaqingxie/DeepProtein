

































100%|██████████████████████████████████████████████████████████████████████████████| 4158/4158 [01:09<00:00, 60.19it/s]



100%|████████████████████████████████████████████████████████████████████████████████| 520/520 [00:08<00:00, 58.44it/s]





100%|████████████████████████████████████████████████████████████████████████████████| 520/520 [00:08<00:00, 58.56it/s]
Protein Function Prediction Mode...
in total: 4158 proteins
encoding protein...
unique target sequence: 4158
Done.
Protein Function Prediction Mode...
in total: 520 proteins
encoding protein...
unique target sequence: 520
Done.
Protein Function Prediction Mode...
in total: 520 proteins
encoding protein...
unique target sequence: 520
Done.
Let's use 1 GPU!
--- Data Preparation ---
--- Go for Training ---
Traceback (most recent call last):
  File "E:\DeepPurposePlusPlus\train\beta.py", line 84, in <module>
    model.train(train, val, test, compute_pos_enc = False)
  File "E:\DeepPurposePlusPlus\ProB\ProteinPred.py", line 329, in train
    score = self.model(v_p)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "E:\DeepPurposePlusPlus\ProB\ProteinPred.py", line 49, in forward
    v_f = self.model_protein(v_P)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "E:\DeepPurposePlusPlus\ProB\encoders.py", line 556, in forward
    node_feats = self.gnn(bg, node_feats, edge_feats)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "E:\anaconda3\envs\graph\lib\site-packages\dgl\nn\pytorch\gt\egt.py", line 130, in forward
    nfeat_ln = self.mha_ln_h(nfeat)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\modules\normalization.py", line 201, in forward
    return F.layer_norm(
  File "E:\anaconda3\envs\graph\lib\site-packages\torch\nn\functional.py", line 2573, in layer_norm
    return torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled)
TypeError: layer_norm(): argument 'input' (position 1) must be Tensor, not DGLGraph